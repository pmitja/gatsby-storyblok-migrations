{
  "type": "node--blog_post",
  "id": "77df0470-ed3c-4fb3-a66d-ab5ec66f4711",
  "links": {
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711?resourceVersion=id%3A8517"
  }
  },
  "attributes": {
  "drupal_internal__nid": 1238,
  "drupal_internal__vid": 8517,
  "langcode": "en",
  "revision_timestamp": "2021-04-16T12:01:31+00:00",
  "revision_log": null,
  "status": true,
  "title": "Top Angular blog posts from March 2021",
  "created": "2021-04-16T11:37:14+00:00",
  "changed": "2021-04-16T12:01:31+00:00",
  "promote": false,
  "sticky": false,
  "default_langcode": true,
  "revision_translation_affected": true,
  "rh_action": null,
  "rh_redirect": null,
  "rh_redirect_response": null,
  "rh_redirect_fallback_action": null,
  "content_translation_source": "und",
  "content_translation_outdated": false,
  "body": {
  "value": "<p>Like every month, weâ€™ve prepared a recap of some of the top Angular posts from the month before. We hope you enjoy revisiting them!</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Nx is Modern Angular</h3>\r\n\r\n<p>First up, we have a post by <a href=\"https://twitter.com/victorsavkin\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Victor Savkin Twitter\">Victor Savkin</a> explaining how Nx is essentially a more streamlined and modern version of Angular, one which can actually work even for a multi-framework setting.</p>\r\n\r\n<p>One of the key elements of this is <strong>the replacement of outdated tools with more modern ones</strong>: Karma with <strong>Jest</strong>, Protractor with <strong>Cypress</strong> and TSLint with <strong>ESLint</strong>, while using <strong>Storybook</strong> as the UI component library.</p>\r\n\r\n<p>The other key component is <strong>Nxâ€™s CLI</strong>, which can be used on its own or simply to enhance the developer experience of using the Angular CLI. Itâ€™s partly based on Angularâ€™s CLI as well, with important optimizations in performance and things like the already powerful <code>ng update</code>.</p>\r\n\r\n<p><a href=\"https://blog.nrwl.io/nx-is-modern-angular-bda6cf10746d\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Nrwl: Medium: Nx is Modern Angular\"><strong>Read more about Nx as modern Angular</strong></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>A practical guide to Angular Template-Driven Forms</h3>\r\n\r\n<p>We continue this monthâ€™s recap with <a href=\"https://twitter.com/tim_deschryver\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Tim Deschryver Twitter\">Tim Deschryver</a>â€™s practical guide to template-driven forms in Angular. It starts off with a section on creating an Angular form which includes a breakdown of different form building blocks.</p>\r\n\r\n<p>The next two sections are dedicated to <strong>form validators</strong> and testing form validators. After that follows a section about <strong>form errors</strong>, which covers control states, validation messages and form helpers.&nbsp;</p>\r\n\r\n<p>Next up, Tim takes a look at creating <strong>dynamic/nested</strong> forms with the template-driven approach, followed by <strong>sub-form components</strong> and a couple different ways of creating them. He provides thorough examples for every part of the blog post, which can also be found on GitHub.</p>\r\n\r\n<p><a href=\"https://timdeschryver.dev/blog/a-practical-guide-to-angular-template-driven-forms\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Tim Deschryver: A practical guide to Angular Template-Driven Forms\"><strong>Read the practical guide to Angular template-driven forms</strong></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>ðŸŽ‰ New in Angular v12 â€” Passing Context to HTTP Interceptors</h3>\r\n\r\n<p>In the third post weâ€™d like to highlight, <a href=\"https://twitter.com/NetanelBasal\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Netanel Basal Twitter\">Netanel Basal</a> breaks down a long-awaited Angular feature thatâ€™s released in version 12 - <strong>passing metadata to HTTP interceptors</strong>.</p>\r\n\r\n<p>Netanelâ€™s post works with the common use case of <strong>notifying the interceptor that a request is cacheable</strong>. You need to make sure that youâ€™ve upgraded to the latest version, then use to CLI to generate the interceptor.</p>\r\n\r\n<p>The next step is to create a unique token with <code>HttpContextToken</code> and provide a default value for it. Then we can provide it in the HTTP request.</p>\r\n\r\n<p><a href=\"https://netbasal.com/new-in-angular-v12-passing-context-to-http-interceptors-308a1ca2f3dd\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Netanel Basal: Medium: ðŸŽ‰ New in Angular v12 â€” Passing Context to HTTP Interceptors\"><strong>Read more about passing context to HTTP interceptors</strong></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>The Complete Guide To Angular Security</h3>\r\n\r\n<p>Next up, we have a post by <a href=\"https://twitter.com/chrislydemann\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Christian LÃ¼demann Twitter\">Christian LÃ¼demann</a> which talks in-depth about security in Angular. It starts off with listing the OWASP top ten (Open Web Application Security Projectâ€™s list of top online security risks) and outlining the ones which are <strong>most relevant for Angular applications</strong>: <strong>Cross-Site Request Forgery (CSRF), Sensitive Data Exposure, Cross-Site Scripting and Using Components with Known Vulnerabilities</strong>.</p>\r\n\r\n<p>Christian also provides an overview of some of the most common security concepts, before taking a closer look at each of the four areas listed above, providing more examples for them and showing the best practices of addressing them in Angular.</p>\r\n\r\n<p><a href=\"https://christianlydemann.com/the-complete-guide-to-angular-security/\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Christian LÃ¼demann: The Complete Guide To Angular Security\"><strong>Read more about security in Angular</strong></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>View State Selector - Angular design pattern</h3>\r\n\r\n<p>Another interesting post is this next one by <a href=\"https://twitter.com/natanBraslavski\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Natan Braslavski Twitter\">Natan Braslavski</a> in which he shows his design pattern for View State Selector that <strong>reduces both boilerplate code and the potential of bugs or missing templates</strong>, which gives it an advantage over the quite similar <code>ngSwitchCase</code>.</p>\r\n\r\n<p>The post focuses on the common use case of changing the view depending on the asynchronous HTTP state. The <code>view$</code> observable has three possible states: loading, main and error, each of which is <strong>bound to a template that gets rendered according to the observableâ€™s value</strong>. In the second part, Natan shows how to implement this pattern as a reusable pattern.</p>\r\n\r\n<p><a href=\"https://indepth.dev/posts/1435/view-state-selector-design-pattern\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"inDepth.dev: View State Selector â€Š-â€ŠAngular design pattern\"><strong>Read more about View State Selector in Angular</strong></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>NGRX Best Practices</h3>\r\n\r\n<p>The sixth post comes from <a href=\"https://twitter.com/Armandotrue\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Armen Vardanyan Twitter\">Armen Vardanyan</a>, who talks about the best practices of building an Angular app with NgRx. Right away, he gives the number one piece of advice: since NgRx changes the way an Angular app is written and structured, you really need to have a <strong>neat folder structure</strong>, with Feature Stores and a consistent structure and naming.</p>\r\n\r\n<p>He continues with other important tips: using <strong>named selectors</strong>, writing<strong> helper functions</strong> and <strong>custom operators</strong>, leveraging <strong>@ngrx/entity </strong>and <strong>@ngrx/component-store</strong>, and using a <strong>linter with rules for NgRx</strong>, such as eslint-plugin-ngrx which was actually contributed by Tim Deschryver whom weâ€™ve shouted out already on this recap.</p>\r\n\r\n<p><a href=\"https://indepth.dev/posts/1451/ngrx-best-practices-new\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"inDepth.dev: NGRX Best Practices\"><strong>Read more about NgRx best practices</strong></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Ivyâ€™s internal data structures</h3>\r\n\r\n<p>Nearing the end of Marchâ€™s recap, we have a post by <a href=\"https://twitter.com/mhevery\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"MiÅ¡ko Hevery Twitter\">MiÅ¡ko Hevery</a> breaking down the internal data structures of the new Ivy rendering engine. Ivy handles rendering by keeping track of three kinds of data: <strong>Template, Logical Tree and Render Tree</strong>.&nbsp;</p>\r\n\r\n<p>The template information is stored in <strong>TView, TData and TNode</strong> data structures which <strong>provide the templateâ€™s static information</strong>. LView or Logical-view represents <strong>specific instances of TView</strong>, and the render tree is the actual DOM tree, which differs from the logical view as it also considers <strong>content projection</strong>. On loading the application, Ivy creates the TView, which is then used to create LView instances upon bootstrapping or instantiating the application.&nbsp;</p>\r\n\r\n<p><a href=\"https://blog.angular.io/ivys-internal-data-structures-f410509c7480\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Angular: Medium: Ivyâ€™s internal data structures\"><strong>Read more about Ivyâ€™s internal data structures</strong></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Extend Angular Schematics to customize your development process</h3>\r\n\r\n<p>The final post from March that weâ€™d like to mention comes from <a href=\"https://twitter.com/maciej_wwojcik\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Maciej Wojcik Twitter\">Maciej Wojcik</a>; it shows some neat tricks for extending your Angular schematics in order to streamline your development process.</p>\r\n\r\n<p>Maciej first provides a brief overview of schematics and why they are useful before proceeding to the main section of his blog post, namely, showing how to <strong>override the default schematics and customize them to suit specific project needs</strong>.</p>\r\n\r\n<p>This includes creating a library for schematics, implementing the custom component schematic and writing the template. In the final part of the post, Maciej suggests some possible improvements to this approach, e.g. <strong>updating Schema.json with additional parameter definitions</strong>.</p>\r\n\r\n<p><a href=\"https://indepth.dev/posts/1438/extend-angular-schematics-to-customize-your-development-process\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"inDepth.dev: Extend Angular Schematics to customize your development process\"><strong>Read more about extending Angular schematics</strong></a></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<drupal-media data-align=\"center\" data-entity-type=\"media\" data-entity-uuid=\"33d11e6f-21e2-453b-a174-65a27633a582\" data-view-mode=\"medium_800\"></drupal-media>\r\n\r\n<p><em>It wasnâ€™t easy making our selections for this post, as the Angular community has been producing a lot of top-notch content lately. Still, we hope you enjoyed Marchâ€™s recap; tune in next month for a similar recap of our favorite reads from April!</em></p>\r\n",
  "format": "rich_editor",
  "processed": "<p>Like every month, weâ€™ve prepared a recap of some of the top Angular posts from the month before. We hope you enjoy revisiting them!</p>\n\n<p> </p>\n\n<h3>Nx is Modern Angular</h3>\n\n<p>First up, we have a post by <a href=\"https://twitter.com/victorsavkin\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Victor Savkin Twitter\">Victor Savkin</a> explaining how Nx is essentially a more streamlined and modern version of Angular, one which can actually work even for a multi-framework setting.</p>\n\n<p>One of the key elements of this is <strong>the replacement of outdated tools with more modern ones</strong>: Karma with <strong>Jest</strong>, Protractor with <strong>Cypress</strong> and TSLint with <strong>ESLint</strong>, while using <strong>Storybook</strong> as the UI component library.</p>\n\n<p>The other key component is <strong>Nxâ€™s CLI</strong>, which can be used on its own or simply to enhance the developer experience of using the Angular CLI. Itâ€™s partly based on Angularâ€™s CLI as well, with important optimizations in performance and things like the already powerful <code>ng update</code>.</p>\n\n<p><a href=\"https://blog.nrwl.io/nx-is-modern-angular-bda6cf10746d\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Nrwl: Medium: Nx is Modern Angular\"><strong>Read more about Nx as modern Angular</strong></a></p>\n\n<p> </p>\n\n<h3>A practical guide to Angular Template-Driven Forms</h3>\n\n<p>We continue this monthâ€™s recap with <a href=\"https://twitter.com/tim_deschryver\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Tim Deschryver Twitter\">Tim Deschryver</a>â€™s practical guide to template-driven forms in Angular. It starts off with a section on creating an Angular form which includes a breakdown of different form building blocks.</p>\n\n<p>The next two sections are dedicated to <strong>form validators</strong> and testing form validators. After that follows a section about <strong>form errors</strong>, which covers control states, validation messages and form helpers. </p>\n\n<p>Next up, Tim takes a look at creating <strong>dynamic/nested</strong> forms with the template-driven approach, followed by <strong>sub-form components</strong> and a couple different ways of creating them. He provides thorough examples for every part of the blog post, which can also be found on GitHub.</p>\n\n<p><a href=\"https://timdeschryver.dev/blog/a-practical-guide-to-angular-template-driven-forms\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Tim Deschryver: A practical guide to Angular Template-Driven Forms\"><strong>Read the practical guide to Angular template-driven forms</strong></a></p>\n\n<p> </p>\n\n<h3>ðŸŽ‰ New in Angular v12 â€” Passing Context to HTTP Interceptors</h3>\n\n<p>In the third post weâ€™d like to highlight, <a href=\"https://twitter.com/NetanelBasal\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Netanel Basal Twitter\">Netanel Basal</a> breaks down a long-awaited Angular feature thatâ€™s released in version 12 - <strong>passing metadata to HTTP interceptors</strong>.</p>\n\n<p>Netanelâ€™s post works with the common use case of <strong>notifying the interceptor that a request is cacheable</strong>. You need to make sure that youâ€™ve upgraded to the latest version, then use to CLI to generate the interceptor.</p>\n\n<p>The next step is to create a unique token with <code>HttpContextToken</code> and provide a default value for it. Then we can provide it in the HTTP request.</p>\n\n<p><a href=\"https://netbasal.com/new-in-angular-v12-passing-context-to-http-interceptors-308a1ca2f3dd\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Netanel Basal: Medium: ðŸŽ‰ New in Angular v12 â€” Passing Context to HTTP Interceptors\"><strong>Read more about passing context to HTTP interceptors</strong></a></p>\n\n<p> </p>\n\n<h3>The Complete Guide To Angular Security</h3>\n\n<p>Next up, we have a post by <a href=\"https://twitter.com/chrislydemann\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Christian LÃ¼demann Twitter\">Christian LÃ¼demann</a> which talks in-depth about security in Angular. It starts off with listing the OWASP top ten (Open Web Application Security Projectâ€™s list of top online security risks) and outlining the ones which are <strong>most relevant for Angular applications</strong>: <strong>Cross-Site Request Forgery (CSRF), Sensitive Data Exposure, Cross-Site Scripting and Using Components with Known Vulnerabilities</strong>.</p>\n\n<p>Christian also provides an overview of some of the most common security concepts, before taking a closer look at each of the four areas listed above, providing more examples for them and showing the best practices of addressing them in Angular.</p>\n\n<p><a href=\"https://christianlydemann.com/the-complete-guide-to-angular-security/\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Christian LÃ¼demann: The Complete Guide To Angular Security\"><strong>Read more about security in Angular</strong></a></p>\n\n<p> </p>\n\n<h3>View State Selector - Angular design pattern</h3>\n\n<p>Another interesting post is this next one by <a href=\"https://twitter.com/natanBraslavski\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Natan Braslavski Twitter\">Natan Braslavski</a> in which he shows his design pattern for View State Selector that <strong>reduces both boilerplate code and the potential of bugs or missing templates</strong>, which gives it an advantage over the quite similar <code>ngSwitchCase</code>.</p>\n\n<p>The post focuses on the common use case of changing the view depending on the asynchronous HTTP state. The <code>view$</code> observable has three possible states: loading, main and error, each of which is <strong>bound to a template that gets rendered according to the observableâ€™s value</strong>. In the second part, Natan shows how to implement this pattern as a reusable pattern.</p>\n\n<p><a href=\"https://indepth.dev/posts/1435/view-state-selector-design-pattern\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"inDepth.dev: View State Selector â€Š-â€ŠAngular design pattern\"><strong>Read more about View State Selector in Angular</strong></a></p>\n\n<p> </p>\n\n<h3>NGRX Best Practices</h3>\n\n<p>The sixth post comes from <a href=\"https://twitter.com/Armandotrue\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Armen Vardanyan Twitter\">Armen Vardanyan</a>, who talks about the best practices of building an Angular app with NgRx. Right away, he gives the number one piece of advice: since NgRx changes the way an Angular app is written and structured, you really need to have a <strong>neat folder structure</strong>, with Feature Stores and a consistent structure and naming.</p>\n\n<p>He continues with other important tips: using <strong>named selectors</strong>, writing<strong> helper functions</strong> and <strong>custom operators</strong>, leveraging <strong>@ngrx/entity </strong>and <strong>@ngrx/component-store</strong>, and using a <strong>linter with rules for NgRx</strong>, such as eslint-plugin-ngrx which was actually contributed by Tim Deschryver whom weâ€™ve shouted out already on this recap.</p>\n\n<p><a href=\"https://indepth.dev/posts/1451/ngrx-best-practices-new\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"inDepth.dev: NGRX Best Practices\"><strong>Read more about NgRx best practices</strong></a></p>\n\n<p> </p>\n\n<h3>Ivyâ€™s internal data structures</h3>\n\n<p>Nearing the end of Marchâ€™s recap, we have a post by <a href=\"https://twitter.com/mhevery\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"MiÅ¡ko Hevery Twitter\">MiÅ¡ko Hevery</a> breaking down the internal data structures of the new Ivy rendering engine. Ivy handles rendering by keeping track of three kinds of data: <strong>Template, Logical Tree and Render Tree</strong>. </p>\n\n<p>The template information is stored in <strong>TView, TData and TNode</strong> data structures which <strong>provide the templateâ€™s static information</strong>. LView or Logical-view represents <strong>specific instances of TView</strong>, and the render tree is the actual DOM tree, which differs from the logical view as it also considers <strong>content projection</strong>. On loading the application, Ivy creates the TView, which is then used to create LView instances upon bootstrapping or instantiating the application. </p>\n\n<p><a href=\"https://blog.angular.io/ivys-internal-data-structures-f410509c7480\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Angular: Medium: Ivyâ€™s internal data structures\"><strong>Read more about Ivyâ€™s internal data structures</strong></a></p>\n\n<p> </p>\n\n<h3>Extend Angular Schematics to customize your development process</h3>\n\n<p>The final post from March that weâ€™d like to mention comes from <a href=\"https://twitter.com/maciej_wwojcik\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"Maciej Wojcik Twitter\">Maciej Wojcik</a>; it shows some neat tricks for extending your Angular schematics in order to streamline your development process.</p>\n\n<p>Maciej first provides a brief overview of schematics and why they are useful before proceeding to the main section of his blog post, namely, showing how to <strong>override the default schematics and customize them to suit specific project needs</strong>.</p>\n\n<p>This includes creating a library for schematics, implementing the custom component schematic and writing the template. In the final part of the post, Maciej suggests some possible improvements to this approach, e.g. <strong>updating Schema.json with additional parameter definitions</strong>.</p>\n\n<p><a href=\"https://indepth.dev/posts/1438/extend-angular-schematics-to-customize-your-development-process\" rel=\"rel='noreferrer'\" target=\"_blank\" title=\"inDepth.dev: Extend Angular Schematics to customize your development process\"><strong>Read more about extending Angular schematics</strong></a></p>\n\n<p> </p>\n\n<article data-align=\"center\"><img src=\"/sites/default/files/styles/medium_800/public/2021-04/Angular%20BP%20March%202021%20final.png?itok=HPElYngb\" width=\"800\" height=\"400\" alt=\"Paper ships following bigger leading paper ship\" loading=\"lazy\" /></article><p><em>It wasnâ€™t easy making our selections for this post, as the Angular community has been producing a lot of top-notch content lately. Still, we hope you enjoyed Marchâ€™s recap; tune in next month for a similar recap of our favorite reads from April!</em></p>\n",
  "summary": "Like every month, weâ€™ve prepared a recap of some of the top Angular posts from the month before. We hope you enjoy revisiting them!"
  },
  "field_blog_post_drupal_planet": false,
  "field_blog_post_jsfeed": false,
  "field_meta_tags": null
  },
  "relationships": {
  "node_type": {
  "data": {
  "type": "node_type--node_type",
  "id": "7a0b1f59-14ed-48de-9aa6-b580de5f2444",
  "meta": {
  "drupal_internal__target_id": "blog_post"
  }
  },
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/node_type?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/node_type?resourceVersion=id%3A8517"
  }
  }
  },
  "revision_uid": {
  "data": {
  "type": "user--user",
  "id": "3c2f7329-7100-4266-969f-3345711bc265",
  "meta": {
  "drupal_internal__target_id": 46
  }
  },
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/revision_uid?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/revision_uid?resourceVersion=id%3A8517"
  }
  }
  },
  "uid": {
  "data": {
  "type": "user--user",
  "id": "3c2f7329-7100-4266-969f-3345711bc265",
  "meta": {
  "drupal_internal__target_id": 46
  }
  },
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/uid?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/uid?resourceVersion=id%3A8517"
  }
  }
  },
  "feeds_item": {
  "data": null,
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/feeds_item?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/feeds_item?resourceVersion=id%3A8517"
  }
  }
  },
  "field_blog_author": {
  "data": {
  "type": "node--team_member",
  "id": "f24a462c-396e-4d22-82c0-63be0c39b06b",
  "meta": {
  "drupal_internal__target_id": 801
  }
  },
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/field_blog_author?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/field_blog_author?resourceVersion=id%3A8517"
  }
  }
  },
  "field_blog_cover": {
  "data": null,
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/field_blog_cover?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/field_blog_cover?resourceVersion=id%3A8517"
  }
  }
  },
  "field_blog_post_promotion": {
  "data": [],
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/field_blog_post_promotion?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/field_blog_post_promotion?resourceVersion=id%3A8517"
  }
  }
  },
  "field_blog_technology": {
  "data": [
  {
  "type": "taxonomy_term--technology",
  "id": "6629ab69-87f1-4894-be36-12c1acab8d44",
  "meta": {
  "drupal_internal__target_id": 18
  }
  }
  ],
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/field_blog_technology?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/field_blog_technology?resourceVersion=id%3A8517"
  }
  }
  },
  "field_category": {
  "data": [],
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/field_category?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/field_category?resourceVersion=id%3A8517"
  }
  }
  },
  "field_media_cover": {
  "data": {
  "type": "media--image",
  "id": "26d570c7-bd9d-499a-9ed3-2d3cbaf5b469",
  "meta": {
  "drupal_internal__target_id": 1800
  }
  },
  "links": {
  "related": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/field_media_cover?resourceVersion=id%3A8517"
  },
  "self": {
  "href": "https://www.agiledrop.com/jsonapi/node/blog_post/77df0470-ed3c-4fb3-a66d-ab5ec66f4711/relationships/field_media_cover?resourceVersion=id%3A8517"
  }
  }
  }
  }
  }